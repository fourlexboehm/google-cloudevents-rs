// This file is @generated by prost-build.
/// The data within all Firebase Real Time Database reference events.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReferenceEventData {
    /// The original data for the reference.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<::pbjson_types::Value>,
    /// The change in the reference data.
    #[prost(message, optional, tag = "2")]
    pub delta: ::core::option::Option<::pbjson_types::Value>,
}
/// The CloudEvent raised when a ref is created in the Firebase Realtime
/// Database.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReferenceCreatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ReferenceEventData>,
}
/// The CloudEvent raised when a reference is updated in the Firebase Realtime
/// Database.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReferenceUpdatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ReferenceEventData>,
}
/// The CloudEvent raised when a reference is deleted in the Firebase Realtime
/// Database.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReferenceDeletedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ReferenceEventData>,
}
/// The CloudEvent raised when a reference is written (created, updated or
/// deleted) in the Firebase Realtime Database.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReferenceWrittenEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ReferenceEventData>,
}
