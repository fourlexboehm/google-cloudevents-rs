// This file is @generated by prost-build.
/// The data within all Firebase Auth events.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthEventData {
    /// The user identifier in the Firebase app.
    #[prost(string, tag = "1")]
    pub uid: ::prost::alloc::string::String,
    /// The user's primary email, if set.
    #[prost(string, tag = "2")]
    pub email: ::prost::alloc::string::String,
    /// Whether or not the user's primary email is verified.
    #[prost(bool, tag = "3")]
    pub email_verified: bool,
    /// The user's display name.
    #[prost(string, tag = "4")]
    pub display_name: ::prost::alloc::string::String,
    /// The user's photo URL.
    #[prost(string, tag = "5")]
    pub photo_url: ::prost::alloc::string::String,
    /// Whether the user is disabled.
    #[prost(bool, tag = "6")]
    pub disabled: bool,
    /// Additional metadata about the user.
    #[prost(message, optional, tag = "7")]
    pub metadata: ::core::option::Option<UserMetadata>,
    /// User's info at the providers
    #[prost(message, repeated, tag = "8")]
    pub provider_data: ::prost::alloc::vec::Vec<UserInfo>,
    /// The user's phone number.
    #[prost(string, tag = "9")]
    pub phone_number: ::prost::alloc::string::String,
    /// User's custom claims, typically used to define user roles and propagated
    /// to an authenticated user's ID token.
    #[prost(message, optional, tag = "10")]
    pub custom_claims: ::core::option::Option<::pbjson_types::Struct>,
}
/// Additional metadata about the user.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UserMetadata {
    /// The date the user was created.
    #[prost(message, optional, tag = "1")]
    pub create_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// The date the user last signed in.
    #[prost(message, optional, tag = "2")]
    pub last_sign_in_time: ::core::option::Option<::pbjson_types::Timestamp>,
}
/// User's info at the identity provider
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserInfo {
    /// The user identifier for the linked provider.
    #[prost(string, tag = "1")]
    pub uid: ::prost::alloc::string::String,
    /// The email for the linked provider.
    #[prost(string, tag = "2")]
    pub email: ::prost::alloc::string::String,
    /// The display name for the linked provider.
    #[prost(string, tag = "3")]
    pub display_name: ::prost::alloc::string::String,
    /// The photo URL for the linked provider.
    #[prost(string, tag = "4")]
    pub photo_url: ::prost::alloc::string::String,
    /// The linked provider ID (e.g. "google.com" for the Google provider).
    #[prost(string, tag = "5")]
    pub provider_id: ::prost::alloc::string::String,
}
/// The CloudEvent raised when a Firebase user is created.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserCreatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<AuthEventData>,
}
/// The CloudEvent raised when a Firebase user is deleted.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserDeletedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<AuthEventData>,
}
