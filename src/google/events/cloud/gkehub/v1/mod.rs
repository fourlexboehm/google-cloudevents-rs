// This file is @generated by prost-build.
/// Feature represents the settings and status of any Hub Feature.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Feature {
    /// Output only. The full, unique name of this Feature resource in the format
    /// `projects/*/locations/*/features/*`.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// GCP labels for this Feature.
    #[prost(map = "string, string", tag = "2")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Output only. State of the Feature resource itself.
    #[prost(message, optional, tag = "3")]
    pub resource_state: ::core::option::Option<FeatureResourceState>,
    /// Output only. The Hub-wide Feature state.
    #[prost(message, optional, tag = "6")]
    pub state: ::core::option::Option<CommonFeatureState>,
    /// Output only. Membership-specific Feature status. If this Feature does
    /// report any per-Membership status, this field may be unused.
    ///
    /// The keys indicate which Membership the state is for, in the form:
    ///
    /// `projects/{p}/locations/{l}/memberships/{m}`
    ///
    /// Where {p} is the project number, {l} is a valid location and {m} is a valid
    /// Membership in this project at that location. {p} MUST match the Feature's
    /// project number.
    #[prost(map = "string, message", tag = "7")]
    pub membership_states: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        MembershipFeatureState,
    >,
    /// Output only. When the Feature resource was created.
    #[prost(message, optional, tag = "8")]
    pub create_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. When the Feature resource was last updated.
    #[prost(message, optional, tag = "9")]
    pub update_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. When the Feature resource was deleted.
    #[prost(message, optional, tag = "10")]
    pub delete_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. Scope-specific Feature status. If this Feature does
    /// report any per-Scope status, this field may be unused.
    ///
    /// The keys indicate which Scope the state is for, in the form:
    ///
    /// `projects/{p}/locations/global/scopes/{s}`
    ///
    /// Where {p} is the project, {s} is a valid Scope in this project.
    /// {p} WILL match the Feature's project.
    #[prost(map = "string, message", tag = "13")]
    pub scope_states: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ScopeFeatureState,
    >,
}
/// FeatureResourceState describes the state of a Feature *resource* in the
/// GkeHub API. See `FeatureState` for the "running state" of the Feature in the
/// Hub and across Memberships.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FeatureResourceState {
    /// The current state of the Feature resource in the Hub API.
    #[prost(enumeration = "feature_resource_state::State", tag = "1")]
    pub state: i32,
}
/// Nested message and enum types in `FeatureResourceState`.
pub mod feature_resource_state {
    /// State describes the lifecycle status of a Feature.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(default)]
    #[serde(rename_all = "snake_case")]
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        /// State is unknown or not set.
        Unspecified = 0,
        /// The Feature is being enabled, and the Feature resource is being created.
        /// Once complete, the corresponding Feature will be enabled in this Hub.
        Enabling = 1,
        /// The Feature is enabled in this Hub, and the Feature resource is fully
        /// available.
        Active = 2,
        /// The Feature is being disabled in this Hub, and the Feature resource
        /// is being deleted.
        Disabling = 3,
        /// The Feature resource is being updated.
        Updating = 4,
        /// The Feature resource is being updated by the Hub Service.
        ServiceUpdating = 5,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "STATE_UNSPECIFIED",
                Self::Enabling => "ENABLING",
                Self::Active => "ACTIVE",
                Self::Disabling => "DISABLING",
                Self::Updating => "UPDATING",
                Self::ServiceUpdating => "SERVICE_UPDATING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "ENABLING" => Some(Self::Enabling),
                "ACTIVE" => Some(Self::Active),
                "DISABLING" => Some(Self::Disabling),
                "UPDATING" => Some(Self::Updating),
                "SERVICE_UPDATING" => Some(Self::ServiceUpdating),
                _ => None,
            }
        }
    }
}
/// FeatureState describes the high-level state of a Feature. It may be used to
/// describe a Feature's state at the environ-level, or per-membershop, depending
/// on the context.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeatureState {
    /// The high-level, machine-readable status of this Feature.
    #[prost(enumeration = "feature_state::Code", tag = "1")]
    pub code: i32,
    /// A human-readable description of the current status.
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    /// The time this status and any related Feature-specific details were updated.
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::pbjson_types::Timestamp>,
}
/// Nested message and enum types in `FeatureState`.
pub mod feature_state {
    /// Code represents a machine-readable, high-level status of the Feature.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(default)]
    #[serde(rename_all = "snake_case")]
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Code {
        /// Unknown or not set.
        Unspecified = 0,
        /// The Feature is operating normally.
        Ok = 1,
        /// The Feature has encountered an issue, and is operating in a degraded
        /// state. The Feature may need intervention to return to normal operation.
        /// See the description and any associated Feature-specific details for more
        /// information.
        Warning = 2,
        /// The Feature is not operating or is in a severely degraded state.
        /// The Feature may need intervention to return to normal operation.
        /// See the description and any associated Feature-specific details for more
        /// information.
        Error = 3,
    }
    impl Code {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "CODE_UNSPECIFIED",
                Self::Ok => "OK",
                Self::Warning => "WARNING",
                Self::Error => "ERROR",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CODE_UNSPECIFIED" => Some(Self::Unspecified),
                "OK" => Some(Self::Ok),
                "WARNING" => Some(Self::Warning),
                "ERROR" => Some(Self::Error),
                _ => None,
            }
        }
    }
}
/// CommonFeatureState contains Hub-wide Feature status information.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommonFeatureState {
    /// Output only. The "running state" of the Feature in this Hub.
    #[prost(message, optional, tag = "1")]
    pub state: ::core::option::Option<FeatureState>,
}
/// ScopeFeatureState contains Scope-wide Feature status information.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScopeFeatureState {
    /// Output only. The "running state" of the Feature in this Scope.
    #[prost(message, optional, tag = "1")]
    pub state: ::core::option::Option<FeatureState>,
}
/// MembershipFeatureState contains Feature status information for a single
/// Membership.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MembershipFeatureState {
    /// The high-level state of this Feature for a single membership.
    #[prost(message, optional, tag = "1")]
    pub state: ::core::option::Option<FeatureState>,
}
/// Scope represents a Scope in a Fleet.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Scope {
    /// The resource name for the scope
    /// `projects/{project}/locations/{location}/scopes/{scope}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. Google-generated UUID for this resource. This is unique across
    /// all scope resources. If a scope resource is deleted and another resource
    /// with the same name is created, it gets a different uid.
    #[prost(string, tag = "2")]
    pub uid: ::prost::alloc::string::String,
    /// Output only. When the scope was created.
    #[prost(message, optional, tag = "3")]
    pub create_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. When the scope was last updated.
    #[prost(message, optional, tag = "4")]
    pub update_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. When the scope was deleted.
    #[prost(message, optional, tag = "5")]
    pub delete_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. State of the scope resource.
    #[prost(message, optional, tag = "6")]
    pub state: ::core::option::Option<ScopeLifecycleState>,
}
/// ScopeLifecycleState describes the state of a Scope resource.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScopeLifecycleState {
    /// Output only. The current state of the scope resource.
    #[prost(enumeration = "scope_lifecycle_state::Code", tag = "1")]
    pub code: i32,
}
/// Nested message and enum types in `ScopeLifecycleState`.
pub mod scope_lifecycle_state {
    /// Code describes the state of a Scope resource.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(default)]
    #[serde(rename_all = "snake_case")]
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Code {
        /// The code is not set.
        Unspecified = 0,
        /// The scope is being created.
        Creating = 1,
        /// The scope active.
        Ready = 2,
        /// The scope is being deleted.
        Deleting = 3,
        /// The scope is being updated.
        Updating = 4,
    }
    impl Code {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "CODE_UNSPECIFIED",
                Self::Creating => "CREATING",
                Self::Ready => "READY",
                Self::Deleting => "DELETING",
                Self::Updating => "UPDATING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CODE_UNSPECIFIED" => Some(Self::Unspecified),
                "CREATING" => Some(Self::Creating),
                "READY" => Some(Self::Ready),
                "DELETING" => Some(Self::Deleting),
                "UPDATING" => Some(Self::Updating),
                _ => None,
            }
        }
    }
}
/// MembershipBinding is a subresource of a Membership, representing
/// what Fleet Scopes (or other, future Fleet resources) a Membership is bound
/// to.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MembershipBinding {
    /// The resource name for the membershipbinding itself
    /// `projects/{project}/locations/{location}/memberships/{membership}/bindings/{membershipbinding}`
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. Google-generated UUID for this resource. This is unique across
    /// all membershipbinding resources. If a membershipbinding resource is deleted
    /// and another resource with the same name is created, it gets a different
    /// uid.
    #[prost(string, tag = "2")]
    pub uid: ::prost::alloc::string::String,
    /// Output only. When the membership binding was created.
    #[prost(message, optional, tag = "5")]
    pub create_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. When the membership binding was last updated.
    #[prost(message, optional, tag = "6")]
    pub update_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. When the membership binding was deleted.
    #[prost(message, optional, tag = "7")]
    pub delete_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. State of the membership binding resource.
    #[prost(message, optional, tag = "8")]
    pub state: ::core::option::Option<MembershipBindingLifecycleState>,
    /// What type of membershipbinding this is.
    #[prost(oneof = "membership_binding::Target", tags = "3, 4")]
    pub target: ::core::option::Option<membership_binding::Target>,
}
/// Nested message and enum types in `MembershipBinding`.
pub mod membership_binding {
    /// What type of membershipbinding this is.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(default)]
    #[serde(rename_all = "snake_case")]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Target {
        /// A Workspace resource name in the format
        /// `projects/*/locations/*/scopes/*`.
        #[prost(string, tag = "3")]
        Scope(::prost::alloc::string::String),
        /// Whether the membershipbinding is Fleet-wide; true means that this
        /// Membership should be bound to all Namespaces in this entire Fleet.
        #[prost(bool, tag = "4")]
        Fleet(bool),
    }
}
/// MembershipBindingLifecycleState describes the state of a Binding resource.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MembershipBindingLifecycleState {
    /// Output only. The current state of the MembershipBinding resource.
    #[prost(enumeration = "membership_binding_lifecycle_state::Code", tag = "1")]
    pub code: i32,
}
/// Nested message and enum types in `MembershipBindingLifecycleState`.
pub mod membership_binding_lifecycle_state {
    /// Code describes the state of a MembershipBinding resource.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(default)]
    #[serde(rename_all = "snake_case")]
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Code {
        /// The code is not set.
        Unspecified = 0,
        /// The membershipbinding is being created.
        Creating = 1,
        /// The membershipbinding active.
        Ready = 2,
        /// The membershipbinding is being deleted.
        Deleting = 3,
        /// The membershipbinding is being updated.
        Updating = 4,
    }
    impl Code {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "CODE_UNSPECIFIED",
                Self::Creating => "CREATING",
                Self::Ready => "READY",
                Self::Deleting => "DELETING",
                Self::Updating => "UPDATING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CODE_UNSPECIFIED" => Some(Self::Unspecified),
                "CREATING" => Some(Self::Creating),
                "READY" => Some(Self::Ready),
                "DELETING" => Some(Self::Deleting),
                "UPDATING" => Some(Self::Updating),
                _ => None,
            }
        }
    }
}
/// Membership contains information about a member cluster.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Membership {
    /// Output only. The full, unique name of this Membership resource in the
    /// format `projects/*/locations/*/memberships/{membership_id}`, set during
    /// creation.
    ///
    /// `membership_id` must be a valid RFC 1123 compliant DNS label:
    ///
    ///    1. At most 63 characters in length
    ///    2. It must consist of lower case alphanumeric characters or `-`
    ///    3. It must start and end with an alphanumeric character
    ///
    /// Which can be expressed as the regex: `[a-z0-9](\[-a-z0-9\]*[a-z0-9])?`,
    /// with a maximum length of 63 characters.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Optional. GCP labels for this membership.
    #[prost(map = "string, string", tag = "2")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Output only. Description of this membership, limited to 63 characters.
    /// Must match the regex: `[a-zA-Z0-9][a-zA-Z0-9_\-\.\ ]*`
    ///
    /// This field is present for legacy purposes.
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// Output only. State of the Membership resource.
    #[prost(message, optional, tag = "5")]
    pub state: ::core::option::Option<MembershipState>,
    /// Output only. When the Membership was created.
    #[prost(message, optional, tag = "6")]
    pub create_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. When the Membership was last updated.
    #[prost(message, optional, tag = "7")]
    pub update_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. When the Membership was deleted.
    #[prost(message, optional, tag = "8")]
    pub delete_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Optional. An externally-generated and managed ID for this Membership. This
    /// ID may be modified after creation, but this is not recommended.
    ///
    /// The ID must match the regex: `[a-zA-Z0-9][a-zA-Z0-9_\-\.]*`
    ///
    /// If this Membership represents a Kubernetes cluster, this value should be
    /// set to the UID of the `kube-system` namespace object.
    #[prost(string, tag = "9")]
    pub external_id: ::prost::alloc::string::String,
    /// Output only. For clusters using Connect, the timestamp of the most recent
    /// connection established with Google Cloud. This time is updated every
    /// several minutes, not continuously. For clusters that do not use GKE
    /// Connect, or that have never connected successfully, this field will be
    /// unset.
    #[prost(message, optional, tag = "10")]
    pub last_connection_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. Google-generated UUID for this resource. This is unique across
    /// all Membership resources. If a Membership resource is deleted and another
    /// resource with the same name is created, it gets a different unique_id.
    #[prost(string, tag = "11")]
    pub unique_id: ::prost::alloc::string::String,
    /// Optional. How to identify workloads from this Membership.
    /// See the documentation on Workload Identity for more details:
    /// <https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity>
    #[prost(message, optional, tag = "12")]
    pub authority: ::core::option::Option<Authority>,
    /// Type of resource represented by this Membership
    #[prost(oneof = "membership::Type", tags = "4")]
    pub r#type: ::core::option::Option<membership::Type>,
}
/// Nested message and enum types in `Membership`.
pub mod membership {
    /// Type of resource represented by this Membership
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(default)]
    #[serde(rename_all = "snake_case")]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Type {
        /// Optional. Endpoint information to reach this member.
        #[prost(message, tag = "4")]
        Endpoint(super::MembershipEndpoint),
    }
}
/// MembershipEndpoint contains information needed to contact a Kubernetes API,
/// endpoint and any additional Kubernetes metadata.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MembershipEndpoint {
    /// Output only. Useful Kubernetes-specific metadata.
    #[prost(message, optional, tag = "2")]
    pub kubernetes_metadata: ::core::option::Option<KubernetesMetadata>,
    /// Optional. The in-cluster Kubernetes Resources that should be applied for a
    /// correctly registered cluster, in the steady state. These resources:
    ///
    ///    * Ensure that the cluster is exclusively registered to one and only one
    ///      Hub Membership.
    ///    * Propagate Workload Pool Information available in the Membership
    ///      Authority field.
    ///    * Ensure proper initial configuration of default Hub Features.
    #[prost(message, optional, tag = "3")]
    pub kubernetes_resource: ::core::option::Option<KubernetesResource>,
    /// Output only. Whether the lifecycle of this membership is managed by a
    /// google cluster platform service.
    #[prost(bool, tag = "8")]
    pub google_managed: bool,
    /// Cluster information of the registered cluster.
    #[prost(oneof = "membership_endpoint::Type", tags = "1, 4, 5, 6, 7")]
    pub r#type: ::core::option::Option<membership_endpoint::Type>,
}
/// Nested message and enum types in `MembershipEndpoint`.
pub mod membership_endpoint {
    /// Cluster information of the registered cluster.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(default)]
    #[serde(rename_all = "snake_case")]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Type {
        /// Optional. Specific information for a GKE-on-GCP cluster.
        #[prost(message, tag = "1")]
        GkeCluster(super::GkeCluster),
        /// Optional. Specific information for a GKE On-Prem cluster. An onprem
        /// user-cluster who has no resourceLink is not allowed to use this field, it
        /// should have a nil "type" instead.
        #[prost(message, tag = "4")]
        OnPremCluster(super::OnPremCluster),
        /// Optional. Specific information for a GKE Multi-Cloud cluster.
        #[prost(message, tag = "5")]
        MultiCloudCluster(super::MultiCloudCluster),
        /// Optional. Specific information for a Google Edge cluster.
        #[prost(message, tag = "6")]
        EdgeCluster(super::EdgeCluster),
        /// Optional. Specific information for a GDC Edge Appliance cluster.
        #[prost(message, tag = "7")]
        ApplianceCluster(super::ApplianceCluster),
    }
}
/// KubernetesResource contains the YAML manifests and configuration for
/// Membership Kubernetes resources in the cluster. After CreateMembership or
/// UpdateMembership, these resources should be re-applied in the cluster.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KubernetesResource {
    /// Output only. Additional Kubernetes resources that need to be applied to the
    /// cluster after Membership creation, and after every update.
    ///
    /// This field is only populated in the Membership returned from a successful
    /// long-running operation from CreateMembership or UpdateMembership. It is not
    /// populated during normal GetMembership or ListMemberships requests. To get
    /// the resource manifest after the initial registration, the caller should
    /// make a UpdateMembership call with an empty field mask.
    #[prost(message, repeated, tag = "2")]
    pub membership_resources: ::prost::alloc::vec::Vec<ResourceManifest>,
    /// Output only. The Kubernetes resources for installing the GKE Connect agent
    ///
    /// This field is only populated in the Membership returned from a successful
    /// long-running operation from CreateMembership or UpdateMembership. It is not
    /// populated during normal GetMembership or ListMemberships requests. To get
    /// the resource manifest after the initial registration, the caller should
    /// make a UpdateMembership call with an empty field mask.
    #[prost(message, repeated, tag = "3")]
    pub connect_resources: ::prost::alloc::vec::Vec<ResourceManifest>,
    /// Optional. Options for Kubernetes resource generation.
    #[prost(message, optional, tag = "4")]
    pub resource_options: ::core::option::Option<ResourceOptions>,
}
/// ResourceOptions represent options for Kubernetes resource generation.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceOptions {
    /// Optional. The Connect agent version to use for connect_resources. Defaults
    /// to the latest GKE Connect version. The version must be a currently
    /// supported version, obsolete versions will be rejected.
    #[prost(string, tag = "1")]
    pub connect_version: ::prost::alloc::string::String,
    /// Optional. Use `apiextensions/v1beta1` instead of `apiextensions/v1` for
    /// CustomResourceDefinition resources.
    /// This option should be set for clusters with Kubernetes apiserver versions
    /// <1.16.
    #[prost(bool, tag = "2")]
    pub v1beta1_crd: bool,
    /// Optional. Major version of the Kubernetes cluster. This is only used to
    /// determine which version to use for the CustomResourceDefinition resources,
    /// `apiextensions/v1beta1` or`apiextensions/v1`.
    #[prost(string, tag = "3")]
    pub k8s_version: ::prost::alloc::string::String,
}
/// ResourceManifest represents a single Kubernetes resource to be applied to
/// the cluster.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceManifest {
    /// YAML manifest of the resource.
    #[prost(string, tag = "1")]
    pub manifest: ::prost::alloc::string::String,
    /// Whether the resource provided in the manifest is `cluster_scoped`.
    /// If unset, the manifest is assumed to be namespace scoped.
    ///
    /// This field is used for REST mapping when applying the resource in a
    /// cluster.
    #[prost(bool, tag = "2")]
    pub cluster_scoped: bool,
}
/// GkeCluster contains information specific to GKE clusters.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GkeCluster {
    /// Immutable. Self-link of the GCP resource for the GKE cluster. For example:
    ///
    /// //container.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster
    ///
    /// Zonal clusters are also supported.
    #[prost(string, tag = "1")]
    pub resource_link: ::prost::alloc::string::String,
    /// Output only. If cluster_missing is set then it denotes that the GKE cluster
    /// no longer exists in the GKE Control Plane.
    #[prost(bool, tag = "2")]
    pub cluster_missing: bool,
}
/// OnPremCluster contains information specific to GKE On-Prem clusters.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OnPremCluster {
    /// Immutable. Self-link of the GCP resource for the GKE On-Prem cluster. For
    /// example:
    ///
    ///   //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/vmwareClusters/my-cluster
    ///   //gkeonprem.googleapis.com/projects/my-project/locations/us-west1-a/bareMetalClusters/my-cluster
    #[prost(string, tag = "1")]
    pub resource_link: ::prost::alloc::string::String,
    /// Output only. If cluster_missing is set then it denotes that
    /// API(gkeonprem.googleapis.com) resource for this GKE On-Prem cluster no
    /// longer exists.
    #[prost(bool, tag = "2")]
    pub cluster_missing: bool,
    /// Immutable. Whether the cluster is an admin cluster.
    #[prost(bool, tag = "3")]
    pub admin_cluster: bool,
    /// Immutable. The on prem cluster's type.
    #[prost(enumeration = "on_prem_cluster::ClusterType", tag = "4")]
    pub cluster_type: i32,
}
/// Nested message and enum types in `OnPremCluster`.
pub mod on_prem_cluster {
    /// ClusterType describes on prem cluster's type.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(default)]
    #[serde(rename_all = "snake_case")]
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum ClusterType {
        /// The ClusterType is not set.
        ClustertypeUnspecified = 0,
        /// The ClusterType is bootstrap cluster.
        Bootstrap = 1,
        /// The ClusterType is baremetal hybrid cluster.
        Hybrid = 2,
        /// The ClusterType is baremetal standalone cluster.
        Standalone = 3,
        /// The ClusterType is user cluster.
        User = 4,
    }
    impl ClusterType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::ClustertypeUnspecified => "CLUSTERTYPE_UNSPECIFIED",
                Self::Bootstrap => "BOOTSTRAP",
                Self::Hybrid => "HYBRID",
                Self::Standalone => "STANDALONE",
                Self::User => "USER",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CLUSTERTYPE_UNSPECIFIED" => Some(Self::ClustertypeUnspecified),
                "BOOTSTRAP" => Some(Self::Bootstrap),
                "HYBRID" => Some(Self::Hybrid),
                "STANDALONE" => Some(Self::Standalone),
                "USER" => Some(Self::User),
                _ => None,
            }
        }
    }
}
/// MultiCloudCluster contains information specific to GKE Multi-Cloud clusters.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultiCloudCluster {
    /// Immutable. Self-link of the GCP resource for the GKE Multi-Cloud cluster.
    /// For example:
    ///
    ///   //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/awsClusters/my-cluster
    ///   //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/azureClusters/my-cluster
    ///   //gkemulticloud.googleapis.com/projects/my-project/locations/us-west1-a/attachedClusters/my-cluster
    #[prost(string, tag = "1")]
    pub resource_link: ::prost::alloc::string::String,
    /// Output only. If cluster_missing is set then it denotes that
    /// API(gkemulticloud.googleapis.com) resource for this GKE Multi-Cloud cluster
    /// no longer exists.
    #[prost(bool, tag = "2")]
    pub cluster_missing: bool,
}
/// EdgeCluster contains information specific to Google Edge Clusters.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EdgeCluster {
    /// Immutable. Self-link of the GCP resource for the Edge Cluster. For
    /// example:
    ///
    /// //edgecontainer.googleapis.com/projects/my-project/locations/us-west1-a/clusters/my-cluster
    #[prost(string, tag = "1")]
    pub resource_link: ::prost::alloc::string::String,
}
/// ApplianceCluster contains information specific to GDC Edge Appliance
/// Clusters.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApplianceCluster {
    /// Immutable. Self-link of the GCP resource for the Appliance Cluster. For
    /// example:
    ///
    /// //transferappliance.googleapis.com/projects/my-project/locations/us-west1-a/appliances/my-appliance
    #[prost(string, tag = "1")]
    pub resource_link: ::prost::alloc::string::String,
}
/// KubernetesMetadata provides informational metadata for Memberships
/// representing Kubernetes clusters.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct KubernetesMetadata {
    /// Output only. Kubernetes API server version string as reported by
    /// `/version`.
    #[prost(string, tag = "1")]
    pub kubernetes_api_server_version: ::prost::alloc::string::String,
    /// Output only. Node providerID as reported by the first node in the list of
    /// nodes on the Kubernetes endpoint. On Kubernetes platforms that support
    /// zero-node clusters (like GKE-on-GCP), the node_count will be zero and the
    /// node_provider_id will be empty.
    #[prost(string, tag = "2")]
    pub node_provider_id: ::prost::alloc::string::String,
    /// Output only. Node count as reported by Kubernetes nodes resources.
    #[prost(int32, tag = "3")]
    pub node_count: i32,
    /// Output only. vCPU count as reported by Kubernetes nodes resources.
    #[prost(int32, tag = "4")]
    pub vcpu_count: i32,
    /// Output only. The total memory capacity as reported by the sum of all
    /// Kubernetes nodes resources, defined in MB.
    #[prost(int32, tag = "5")]
    pub memory_mb: i32,
    /// Output only. The time at which these details were last updated. This
    /// update_time is different from the Membership-level update_time since
    /// EndpointDetails are updated internally for API consumers.
    #[prost(message, optional, tag = "100")]
    pub update_time: ::core::option::Option<::pbjson_types::Timestamp>,
}
/// MembershipState describes the state of a Membership resource.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MembershipState {
    /// Output only. The current state of the Membership resource.
    #[prost(enumeration = "membership_state::Code", tag = "1")]
    pub code: i32,
}
/// Nested message and enum types in `MembershipState`.
pub mod membership_state {
    /// Code describes the state of a Membership resource.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(default)]
    #[serde(rename_all = "snake_case")]
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum Code {
        /// The code is not set.
        Unspecified = 0,
        /// The cluster is being registered.
        Creating = 1,
        /// The cluster is registered.
        Ready = 2,
        /// The cluster is being unregistered.
        Deleting = 3,
        /// The Membership is being updated.
        Updating = 4,
        /// The Membership is being updated by the Hub Service.
        ServiceUpdating = 5,
    }
    impl Code {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "CODE_UNSPECIFIED",
                Self::Creating => "CREATING",
                Self::Ready => "READY",
                Self::Deleting => "DELETING",
                Self::Updating => "UPDATING",
                Self::ServiceUpdating => "SERVICE_UPDATING",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "CODE_UNSPECIFIED" => Some(Self::Unspecified),
                "CREATING" => Some(Self::Creating),
                "READY" => Some(Self::Ready),
                "DELETING" => Some(Self::Deleting),
                "UPDATING" => Some(Self::Updating),
                "SERVICE_UPDATING" => Some(Self::ServiceUpdating),
                _ => None,
            }
        }
    }
}
/// Authority encodes how Google will recognize identities from this Membership.
/// See the workload identity documentation for more details:
/// <https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity>
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Authority {
    /// Optional. A JSON Web Token (JWT) issuer URI. `issuer` must start with
    /// `<https://`> and be a valid URL with length <2000 characters.
    ///
    /// If set, then Google will allow valid OIDC tokens from this issuer to
    /// authenticate within the workload_identity_pool. OIDC discovery will be
    /// performed on this URI to validate tokens from the issuer.
    ///
    /// Clearing `issuer` disables Workload Identity. `issuer` cannot be directly
    /// modified; it must be cleared (and Workload Identity disabled) before using
    /// a new issuer (and re-enabling Workload Identity).
    #[prost(string, tag = "1")]
    pub issuer: ::prost::alloc::string::String,
    /// Output only. The name of the workload identity pool in which `issuer` will
    /// be recognized.
    ///
    /// There is a single Workload Identity Pool per Hub that is shared
    /// between all Memberships that belong to that Hub. For a Hub hosted in
    /// {PROJECT_ID}, the workload pool format is `{PROJECT_ID}.hub.id.goog`,
    /// although this is subject to change in newer versions of this API.
    #[prost(string, tag = "2")]
    pub workload_identity_pool: ::prost::alloc::string::String,
    /// Output only. An identity provider that reflects the `issuer` in the
    /// workload identity pool.
    #[prost(string, tag = "3")]
    pub identity_provider: ::prost::alloc::string::String,
    /// Optional. OIDC verification keys for this Membership in JWKS format (RFC
    /// 7517).
    ///
    /// When this field is set, OIDC discovery will NOT be performed on `issuer`,
    /// and instead OIDC tokens will be validated using this field.
    #[prost(bytes = "vec", tag = "4")]
    pub oidc_jwks: ::prost::alloc::vec::Vec<u8>,
}
/// The data within all Scope events.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScopeEventData {
    /// Optional. The Scope event payload. Unset for deletion events.
    #[prost(message, optional, tag = "1")]
    pub payload: ::core::option::Option<Scope>,
}
/// The data within all Membership events.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MembershipEventData {
    /// Optional. The Membership event payload. Unset for deletion events.
    #[prost(message, optional, tag = "1")]
    pub payload: ::core::option::Option<Membership>,
}
/// The data within all Feature events.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeatureEventData {
    /// Optional. The Feature event payload. Unset for deletion events.
    #[prost(message, optional, tag = "1")]
    pub payload: ::core::option::Option<Feature>,
}
/// The data within all MembershipBinding events.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MembershipBindingEventData {
    /// Optional. The MembershipBinding event payload. Unset for deletion events.
    #[prost(message, optional, tag = "1")]
    pub payload: ::core::option::Option<MembershipBinding>,
}
/// The CloudEvent raised when a Membership is created.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MembershipCreatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<MembershipEventData>,
}
/// The CloudEvent raised when a Feature is created.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeatureCreatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<FeatureEventData>,
}
/// The CloudEvent raised when a Membership is deleted.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MembershipDeletedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<MembershipEventData>,
}
/// The CloudEvent raised when a Feature is deleted.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeatureDeletedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<FeatureEventData>,
}
/// The CloudEvent raised when a Membership is updated.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MembershipUpdatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<MembershipEventData>,
}
/// The CloudEvent raised when a Feature is updated.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeatureUpdatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<FeatureEventData>,
}
/// The CloudEvent raised when a Scope is created.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScopeCreatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ScopeEventData>,
}
/// The CloudEvent raised when a Scope is deleted.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScopeDeletedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ScopeEventData>,
}
/// The CloudEvent raised when a MembershipBinding is created.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MembershipBindingCreatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<MembershipBindingEventData>,
}
/// The CloudEvent raised when a MembershipBinding is updated.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MembershipBindingUpdatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<MembershipBindingEventData>,
}
/// The CloudEvent raised when a MembershipBinding is deleted.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MembershipBindingDeletedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<MembershipBindingEventData>,
}
