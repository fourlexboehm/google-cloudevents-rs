// This file is @generated by prost-build.
/// ResourceInfo represents the information/status of an app connector resource.
/// Such as:
/// - remote_agent
///    - container
///      - runtime
///      - appgateway
///        - appconnector
///          - appconnection
///            - tunnel
///        - logagent
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceInfo {
    /// Required. Unique Id for the resource.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Overall health status. Overall status is derived based on the status of
    /// each sub level resources.
    #[prost(enumeration = "HealthStatus", tag = "2")]
    pub status: i32,
    /// The timestamp to collect the info. It is suggested to be set by
    /// the topmost level resource only.
    #[prost(message, optional, tag = "4")]
    pub time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// List of Info for the sub level resources.
    #[prost(message, repeated, tag = "5")]
    pub sub: ::prost::alloc::vec::Vec<ResourceInfo>,
}
/// A BeyondCorp connector resource that represents an application facing
/// component deployed proximal to and with direct access to the application
/// instances. It is used to establish connectivity between the remote enterprise
/// environment and GCP. It initiates connections to the applications and can
/// proxy the data from users over the connection.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppConnector {
    /// Required. Unique resource name of the AppConnector.
    /// The name is ignored when creating a AppConnector.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. Timestamp when the resource was created.
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. Timestamp when the resource was last modified.
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Optional. Resource labels to represent user provided metadata.
    #[prost(map = "string, string", tag = "4")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Optional. An arbitrary user-provided name for the AppConnector. Cannot
    /// exceed 64 characters.
    #[prost(string, tag = "5")]
    pub display_name: ::prost::alloc::string::String,
    /// Output only. A unique identifier for the instance generated by the
    /// system.
    #[prost(string, tag = "6")]
    pub uid: ::prost::alloc::string::String,
    /// Output only. The current state of the AppConnector.
    #[prost(enumeration = "app_connector::State", tag = "7")]
    pub state: i32,
    /// Required. Principal information about the Identity of the AppConnector.
    #[prost(message, optional, tag = "8")]
    pub principal_info: ::core::option::Option<app_connector::PrincipalInfo>,
    /// Optional. Resource info of the connector.
    #[prost(message, optional, tag = "11")]
    pub resource_info: ::core::option::Option<ResourceInfo>,
}
/// Nested message and enum types in `AppConnector`.
pub mod app_connector {
    /// PrincipalInfo represents an Identity oneof.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(rename_all = "snake_case")]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct PrincipalInfo {
        #[prost(oneof = "principal_info::Type", tags = "1")]
        pub r#type: ::core::option::Option<principal_info::Type>,
    }
    /// Nested message and enum types in `PrincipalInfo`.
    pub mod principal_info {
        /// ServiceAccount represents a GCP service account.
        #[derive(serde::Serialize, serde::Deserialize)]
        #[serde(rename_all = "snake_case")]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct ServiceAccount {
            /// Email address of the service account.
            #[prost(string, tag = "1")]
            pub email: ::prost::alloc::string::String,
        }
        #[derive(serde::Serialize, serde::Deserialize)]
        #[serde(rename_all = "snake_case")]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Type {
            /// A GCP service account.
            #[prost(message, tag = "1")]
            ServiceAccount(ServiceAccount),
        }
    }
    /// Represents the different states of a AppConnector.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(rename_all = "snake_case")]
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        /// Default value. This value is unused.
        Unspecified = 0,
        /// AppConnector is being created.
        Creating = 1,
        /// AppConnector has been created.
        Created = 2,
        /// AppConnector's configuration is being updated.
        Updating = 3,
        /// AppConnector is being deleted.
        Deleting = 4,
        /// AppConnector is down and may be restored in the future.
        /// This happens when CCFE sends ProjectState = OFF.
        Down = 5,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "STATE_UNSPECIFIED",
                Self::Creating => "CREATING",
                Self::Created => "CREATED",
                Self::Updating => "UPDATING",
                Self::Deleting => "DELETING",
                Self::Down => "DOWN",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "CREATING" => Some(Self::Creating),
                "CREATED" => Some(Self::Created),
                "UPDATING" => Some(Self::Updating),
                "DELETING" => Some(Self::Deleting),
                "DOWN" => Some(Self::Down),
                _ => None,
            }
        }
    }
}
/// The data within all AppConnector events.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppConnectorEventData {
    /// Optional. The AppConnector event payload. Unset for deletion events.
    #[prost(message, optional, tag = "1")]
    pub payload: ::core::option::Option<AppConnector>,
}
/// HealthStatus represents the health status.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum HealthStatus {
    /// Health status is unknown: not initialized or failed to retrieve.
    Unspecified = 0,
    /// The resource is healthy.
    Healthy = 1,
    /// The resource is unhealthy.
    Unhealthy = 2,
    /// The resource is unresponsive.
    Unresponsive = 3,
    /// Some sub-resources are UNHEALTHY.
    Degraded = 4,
}
impl HealthStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "HEALTH_STATUS_UNSPECIFIED",
            Self::Healthy => "HEALTHY",
            Self::Unhealthy => "UNHEALTHY",
            Self::Unresponsive => "UNRESPONSIVE",
            Self::Degraded => "DEGRADED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HEALTH_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "HEALTHY" => Some(Self::Healthy),
            "UNHEALTHY" => Some(Self::Unhealthy),
            "UNRESPONSIVE" => Some(Self::Unresponsive),
            "DEGRADED" => Some(Self::Degraded),
            _ => None,
        }
    }
}
/// The CloudEvent raised when an AppConnector is created.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppConnectorCreatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<AppConnectorEventData>,
}
/// The CloudEvent raised when an AppConnector is updated.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppConnectorUpdatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<AppConnectorEventData>,
}
/// The CloudEvent raised when an AppConnector is deleted.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppConnectorDeletedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<AppConnectorEventData>,
}
