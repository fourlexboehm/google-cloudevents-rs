// This file is @generated by prost-build.
/// Message describing ClientConnectorService object.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientConnectorService {
    /// Required. Name of resource. The name is ignored during creation.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. \[Output only\] Create time stamp.
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. \[Output only\] Update time stamp.
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Optional. User-provided name.
    /// The display name should follow certain format.
    /// * Must be 6 to 30 characters in length.
    /// * Can only contain lowercase letters, numbers, and hyphens.
    /// * Must start with a letter.
    #[prost(string, tag = "4")]
    pub display_name: ::prost::alloc::string::String,
    /// Required. The details of the ingress settings.
    #[prost(message, optional, tag = "6")]
    pub ingress: ::core::option::Option<client_connector_service::Ingress>,
    /// Required. The details of the egress settings.
    #[prost(message, optional, tag = "7")]
    pub egress: ::core::option::Option<client_connector_service::Egress>,
    /// Output only. The operational state of the ClientConnectorService.
    #[prost(enumeration = "client_connector_service::State", tag = "8")]
    pub state: i32,
}
/// Nested message and enum types in `ClientConnectorService`.
pub mod client_connector_service {
    /// Settings of how to connect to the ClientGateway.
    /// One of the following options should be set.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(default)]
    #[serde(rename_all = "snake_case")]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Ingress {
        #[prost(oneof = "ingress::IngressConfig", tags = "1")]
        pub ingress_config: ::core::option::Option<ingress::IngressConfig>,
    }
    /// Nested message and enum types in `Ingress`.
    pub mod ingress {
        /// The basic ingress config for ClientGateways.
        #[derive(serde::Serialize, serde::Deserialize)]
        #[serde(default)]
        #[serde(rename_all = "snake_case")]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct Config {
            /// Required. Immutable. The transport protocol used between the client and
            /// the server.
            #[prost(enumeration = "config::TransportProtocol", tag = "1")]
            pub transport_protocol: i32,
            /// Required. The settings used to configure basic ClientGateways.
            #[prost(message, repeated, tag = "2")]
            pub destination_routes: ::prost::alloc::vec::Vec<config::DestinationRoute>,
        }
        /// Nested message and enum types in `Config`.
        pub mod config {
            /// The setting used to configure ClientGateways.
            /// It is adding routes to the client's routing table
            /// after the connection is established.
            #[derive(serde::Serialize, serde::Deserialize)]
            #[serde(default)]
            #[serde(rename_all = "snake_case")]
            #[derive(Clone, PartialEq, ::prost::Message)]
            pub struct DestinationRoute {
                /// Required. The network address of the subnet
                /// for which the packet is routed to the ClientGateway.
                #[prost(string, tag = "1")]
                pub address: ::prost::alloc::string::String,
                /// Required. The network mask of the subnet
                /// for which the packet is routed to the ClientGateway.
                #[prost(string, tag = "2")]
                pub netmask: ::prost::alloc::string::String,
            }
            /// The protocol used to connect to the server.
            #[derive(serde::Serialize, serde::Deserialize)]
            #[serde(default)]
            #[serde(rename_all = "snake_case")]
            #[derive(
                Clone,
                Copy,
                Debug,
                PartialEq,
                Eq,
                Hash,
                PartialOrd,
                Ord,
                ::prost::Enumeration
            )]
            #[repr(i32)]
            pub enum TransportProtocol {
                /// Default value. This value is unused.
                Unspecified = 0,
                /// TCP protocol.
                Tcp = 1,
            }
            impl TransportProtocol {
                /// String value of the enum field names used in the ProtoBuf definition.
                ///
                /// The values are not transformed in any way and thus are considered stable
                /// (if the ProtoBuf definition does not change) and safe for programmatic use.
                pub fn as_str_name(&self) -> &'static str {
                    match self {
                        Self::Unspecified => "TRANSPORT_PROTOCOL_UNSPECIFIED",
                        Self::Tcp => "TCP",
                    }
                }
                /// Creates an enum from field names used in the ProtoBuf definition.
                pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
                    match value {
                        "TRANSPORT_PROTOCOL_UNSPECIFIED" => Some(Self::Unspecified),
                        "TCP" => Some(Self::Tcp),
                        _ => None,
                    }
                }
            }
        }
        #[derive(serde::Serialize, serde::Deserialize)]
        #[serde(default)]
        #[serde(rename_all = "snake_case")]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum IngressConfig {
            /// The basic ingress config for ClientGateways.
            #[prost(message, tag = "1")]
            Config(Config),
        }
    }
    /// The details of the egress info. One of the following options should be set.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(default)]
    #[serde(rename_all = "snake_case")]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Egress {
        #[prost(oneof = "egress::DestinationType", tags = "1")]
        pub destination_type: ::core::option::Option<egress::DestinationType>,
    }
    /// Nested message and enum types in `Egress`.
    pub mod egress {
        /// The peered VPC owned by the consumer project.
        #[derive(serde::Serialize, serde::Deserialize)]
        #[serde(default)]
        #[serde(rename_all = "snake_case")]
        #[derive(Clone, PartialEq, ::prost::Message)]
        pub struct PeeredVpc {
            /// Required. The name of the peered VPC owned by the consumer project.
            #[prost(string, tag = "1")]
            pub network_vpc: ::prost::alloc::string::String,
        }
        #[derive(serde::Serialize, serde::Deserialize)]
        #[serde(default)]
        #[serde(rename_all = "snake_case")]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum DestinationType {
            /// A VPC from the consumer project.
            #[prost(message, tag = "1")]
            PeeredVpc(PeeredVpc),
        }
    }
    /// Represents the different states of a ClientConnectorService.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(default)]
    #[serde(rename_all = "snake_case")]
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        /// Default value. This value is unused.
        Unspecified = 0,
        /// ClientConnectorService is being created.
        Creating = 1,
        /// ClientConnectorService is being updated.
        Updating = 2,
        /// ClientConnectorService is being deleted.
        Deleting = 3,
        /// ClientConnectorService is running.
        Running = 4,
        /// ClientConnectorService is down and may be restored in the future.
        /// This happens when CCFE sends ProjectState = OFF.
        Down = 5,
        /// ClientConnectorService encountered an error and is in an indeterministic
        /// state.
        Error = 6,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "STATE_UNSPECIFIED",
                Self::Creating => "CREATING",
                Self::Updating => "UPDATING",
                Self::Deleting => "DELETING",
                Self::Running => "RUNNING",
                Self::Down => "DOWN",
                Self::Error => "ERROR",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "CREATING" => Some(Self::Creating),
                "UPDATING" => Some(Self::Updating),
                "DELETING" => Some(Self::Deleting),
                "RUNNING" => Some(Self::Running),
                "DOWN" => Some(Self::Down),
                "ERROR" => Some(Self::Error),
                _ => None,
            }
        }
    }
}
/// The data within all ClientConnectorService events.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientConnectorServiceEventData {
    /// Optional. The ClientConnectorService event payload. Unset for deletion
    /// events.
    #[prost(message, optional, tag = "1")]
    pub payload: ::core::option::Option<ClientConnectorService>,
}
/// The CloudEvent raised when a ClientConnectorService is created.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientConnectorServiceCreatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ClientConnectorServiceEventData>,
}
/// The CloudEvent raised when a ClientConnectorService is updated.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientConnectorServiceUpdatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ClientConnectorServiceEventData>,
}
/// The CloudEvent raised when a ClientConnectorService is deleted.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientConnectorServiceDeletedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ClientConnectorServiceEventData>,
}
