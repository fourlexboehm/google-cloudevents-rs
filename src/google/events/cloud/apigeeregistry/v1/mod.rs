// This file is @generated by prost-build.
/// An Instance represents the instance resources of the Registry.
/// Currently, only one instance is allowed for each project.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instance {
    /// Format: `projects/*/locations/*/instance`.
    /// Currently only `locations/global` is supported.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Output only. Creation timestamp.
    #[prost(message, optional, tag = "2")]
    pub create_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. Last update timestamp.
    #[prost(message, optional, tag = "3")]
    pub update_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. The current state of the Instance.
    #[prost(enumeration = "instance::State", tag = "4")]
    pub state: i32,
    /// Output only. Extra information of Instance.State if the state is `FAILED`.
    #[prost(string, tag = "5")]
    pub state_message: ::prost::alloc::string::String,
    /// Required. Config of the Instance.
    #[prost(message, optional, tag = "6")]
    pub config: ::core::option::Option<instance::Config>,
}
/// Nested message and enum types in `Instance`.
pub mod instance {
    /// Available configurations to provision an Instance.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(default)]
    #[serde(rename_all = "snake_case")]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Config {
        /// Output only. The GCP location where the Instance resides.
        #[prost(string, tag = "1")]
        pub location: ::prost::alloc::string::String,
        /// Required. The Customer Managed Encryption Key (CMEK) used for data
        /// encryption. The CMEK name should follow the format of
        /// `projects/(\[^/\]+)/locations/(\[^/\]+)/keyRings/(\[^/\]+)/cryptoKeys/(\[^/\]+)`,
        /// where the `location` must match InstanceConfig.location.
        #[prost(string, tag = "2")]
        pub cmek_key_name: ::prost::alloc::string::String,
    }
    /// State of the Instance.
    #[derive(serde::Serialize, serde::Deserialize)]
    #[serde(default)]
    #[serde(rename_all = "snake_case")]
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum State {
        /// The default value. This value is used if the state is omitted.
        Unspecified = 0,
        /// The Instance has not been initialized or has been deleted.
        Inactive = 1,
        /// The Instance is being created.
        Creating = 2,
        /// The Instance has been created and is ready for use.
        Active = 3,
        /// The Instance is being updated.
        Updating = 4,
        /// The Instance is being deleted.
        Deleting = 5,
        /// The Instance encountered an error during a state change.
        Failed = 6,
    }
    impl State {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "STATE_UNSPECIFIED",
                Self::Inactive => "INACTIVE",
                Self::Creating => "CREATING",
                Self::Active => "ACTIVE",
                Self::Updating => "UPDATING",
                Self::Deleting => "DELETING",
                Self::Failed => "FAILED",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "STATE_UNSPECIFIED" => Some(Self::Unspecified),
                "INACTIVE" => Some(Self::Inactive),
                "CREATING" => Some(Self::Creating),
                "ACTIVE" => Some(Self::Active),
                "UPDATING" => Some(Self::Updating),
                "DELETING" => Some(Self::Deleting),
                "FAILED" => Some(Self::Failed),
                _ => None,
            }
        }
    }
}
/// A top-level description of an API.
/// Produced by producers and are commitments to provide services.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Api {
    /// Resource name.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Human-meaningful name.
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    /// A detailed description.
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// Output only. Creation timestamp.
    #[prost(message, optional, tag = "4")]
    pub create_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. Last update timestamp.
    #[prost(message, optional, tag = "5")]
    pub update_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// A user-definable description of the availability of this service.
    /// Format: free-form, but we expect single words that describe availability,
    /// e.g., "NONE", "TESTING", "PREVIEW", "GENERAL", "DEPRECATED", "SHUTDOWN".
    #[prost(string, tag = "6")]
    pub availability: ::prost::alloc::string::String,
    /// The recommended version of the API.
    /// Format:
    /// `projects/{project}/locations/{location}/apis/{api}/versions/{version}`
    #[prost(string, tag = "7")]
    pub recommended_version: ::prost::alloc::string::String,
    /// The recommended deployment of the API.
    /// Format:
    /// `projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}`
    #[prost(string, tag = "8")]
    pub recommended_deployment: ::prost::alloc::string::String,
    /// Labels attach identifying metadata to resources. Identifying metadata can
    /// be used to filter list operations.
    ///
    /// Label keys and values can be no longer than 64 characters
    /// (Unicode codepoints), can only contain lowercase letters, numeric
    /// characters, underscores, and dashes. International characters are allowed.
    /// No more than 64 user labels can be associated with one resource (System
    /// labels are excluded).
    ///
    /// See <https://goo.gl/xmQnxf> for more information and examples of labels.
    /// System reserved label keys are prefixed with
    /// `apigeeregistry.googleapis.com/` and cannot be changed.
    #[prost(map = "string, string", tag = "9")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Annotations attach non-identifying metadata to resources.
    ///
    /// Annotation keys and values are less restricted than those of labels, but
    /// should be generally used for small values of broad interest. Larger, topic-
    /// specific metadata should be stored in Artifacts.
    #[prost(map = "string, string", tag = "10")]
    pub annotations: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Describes a particular version of an API.
/// ApiVersions are what consumers actually use.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiVersion {
    /// Resource name.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Human-meaningful name.
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    /// A detailed description.
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// Output only. Creation timestamp.
    #[prost(message, optional, tag = "4")]
    pub create_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. Last update timestamp.
    #[prost(message, optional, tag = "5")]
    pub update_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// A user-definable description of the lifecycle phase of this API version.
    /// Format: free-form, but we expect single words that describe API maturity,
    /// e.g., "CONCEPT", "DESIGN", "DEVELOPMENT", "STAGING", "PRODUCTION",
    /// "DEPRECATED", "RETIRED".
    #[prost(string, tag = "6")]
    pub state: ::prost::alloc::string::String,
    /// Labels attach identifying metadata to resources. Identifying metadata can
    /// be used to filter list operations.
    ///
    /// Label keys and values can be no longer than 64 characters
    /// (Unicode codepoints), can only contain lowercase letters, numeric
    /// characters, underscores and dashes. International characters are allowed.
    /// No more than 64 user labels can be associated with one resource (System
    /// labels are excluded).
    ///
    /// See <https://goo.gl/xmQnxf> for more information and examples of labels.
    /// System reserved label keys are prefixed with
    /// `apigeeregistry.googleapis.com/` and cannot be changed.
    #[prost(map = "string, string", tag = "7")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Annotations attach non-identifying metadata to resources.
    ///
    /// Annotation keys and values are less restricted than those of labels, but
    /// should be generally used for small values of broad interest. Larger, topic-
    /// specific metadata should be stored in Artifacts.
    #[prost(map = "string, string", tag = "8")]
    pub annotations: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Describes a version of an API in a structured way.
/// ApiSpecs provide formal descriptions that consumers can use to use a version.
/// ApiSpec resources are intended to be fully-resolved descriptions of an
/// ApiVersion. When specs consist of multiple files, these should be bundled
/// together (e.g., in a zip archive) and stored as a unit. Multiple specs can
/// exist to provide representations in different API description formats.
/// Synchronization of these representations would be provided by tooling and
/// background services.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiSpec {
    /// Resource name.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// A possibly-hierarchical name used to refer to the spec from other specs.
    #[prost(string, tag = "2")]
    pub filename: ::prost::alloc::string::String,
    /// A detailed description.
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// Output only. Immutable. The revision ID of the spec.
    /// A new revision is committed whenever the spec contents are changed.
    /// The format is an 8-character hexadecimal string.
    #[prost(string, tag = "4")]
    pub revision_id: ::prost::alloc::string::String,
    /// Output only. Creation timestamp; when the spec resource was created.
    #[prost(message, optional, tag = "5")]
    pub create_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. Revision creation timestamp; when the represented revision was
    /// created.
    #[prost(message, optional, tag = "6")]
    pub revision_create_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. Last update timestamp: when the represented revision was last
    /// modified.
    #[prost(message, optional, tag = "7")]
    pub revision_update_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// A style (format) descriptor for this spec that is specified as a Media Type
    /// (<https://en.wikipedia.org/wiki/Media_type>). Possible values include
    /// `application/vnd.apigee.proto`, `application/vnd.apigee.openapi`, and
    /// `application/vnd.apigee.graphql`, with possible suffixes representing
    /// compression types. These hypothetical names are defined in the vendor tree
    /// defined in RFC6838 (<https://tools.ietf.org/html/rfc6838>) and are not final.
    /// Content types can specify compression. Currently only GZip compression is
    /// supported (indicated with "+gzip").
    #[prost(string, tag = "8")]
    pub mime_type: ::prost::alloc::string::String,
    /// Output only. The size of the spec file in bytes. If the spec is gzipped,
    /// this is the size of the uncompressed spec.
    #[prost(int32, tag = "9")]
    pub size_bytes: i32,
    /// Output only. A SHA-256 hash of the spec's contents. If the spec is gzipped,
    /// this is the hash of the uncompressed spec.
    #[prost(string, tag = "10")]
    pub hash: ::prost::alloc::string::String,
    /// The original source URI of the spec (if one exists).
    /// This is an external location that can be used for reference purposes
    /// but which may not be authoritative since this external resource may
    /// change after the spec is retrieved.
    #[prost(string, tag = "11")]
    pub source_uri: ::prost::alloc::string::String,
    /// Labels attach identifying metadata to resources. Identifying metadata can
    /// be used to filter list operations.
    ///
    /// Label keys and values can be no longer than 64 characters
    /// (Unicode codepoints), can only contain lowercase letters, numeric
    /// characters, underscores and dashes. International characters are allowed.
    /// No more than 64 user labels can be associated with one resource (System
    /// labels are excluded).
    ///
    /// See <https://goo.gl/xmQnxf> for more information and examples of labels.
    /// System reserved label keys are prefixed with
    /// `apigeeregistry.googleapis.com/` and cannot be changed.
    #[prost(map = "string, string", tag = "14")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Annotations attach non-identifying metadata to resources.
    ///
    /// Annotation keys and values are less restricted than those of labels, but
    /// should be generally used for small values of broad interest. Larger, topic-
    /// specific metadata should be stored in Artifacts.
    #[prost(map = "string, string", tag = "15")]
    pub annotations: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// Describes a service running at particular address that
/// provides a particular version of an API. ApiDeployments have revisions which
/// correspond to different configurations of a single deployment in time.
/// Revision identifiers should be updated whenever the served API spec or
/// endpoint address changes.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiDeployment {
    /// Resource name.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Human-meaningful name.
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    /// A detailed description.
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// Output only. Immutable. The revision ID of the deployment.
    /// A new revision is committed whenever the deployment contents are changed.
    /// The format is an 8-character hexadecimal string.
    #[prost(string, tag = "4")]
    pub revision_id: ::prost::alloc::string::String,
    /// Output only. Creation timestamp; when the deployment resource was created.
    #[prost(message, optional, tag = "5")]
    pub create_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. Revision creation timestamp; when the represented revision was
    /// created.
    #[prost(message, optional, tag = "6")]
    pub revision_create_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// Output only. Last update timestamp: when the represented revision was last
    /// modified.
    #[prost(message, optional, tag = "7")]
    pub revision_update_time: ::core::option::Option<::pbjson_types::Timestamp>,
    /// The full resource name (including revision ID) of the spec of the API being
    /// served by the deployment. Changes to this value will update the revision.
    /// Format: `apis/{api}/deployments/{deployment}`
    #[prost(string, tag = "8")]
    pub api_spec_revision: ::prost::alloc::string::String,
    /// The address where the deployment is serving. Changes to this value will
    /// update the revision.
    #[prost(string, tag = "9")]
    pub endpoint_uri: ::prost::alloc::string::String,
    /// The address of the external channel of the API (e.g., the Developer
    /// Portal). Changes to this value will not affect the revision.
    #[prost(string, tag = "10")]
    pub external_channel_uri: ::prost::alloc::string::String,
    /// Text briefly identifying the intended audience of the API. Changes to this
    /// value will not affect the revision.
    #[prost(string, tag = "11")]
    pub intended_audience: ::prost::alloc::string::String,
    /// Text briefly describing how to access the endpoint. Changes to this value
    /// will not affect the revision.
    #[prost(string, tag = "12")]
    pub access_guidance: ::prost::alloc::string::String,
    /// Labels attach identifying metadata to resources. Identifying metadata can
    /// be used to filter list operations.
    ///
    /// Label keys and values can be no longer than 64 characters
    /// (Unicode codepoints), can only contain lowercase letters, numeric
    /// characters, underscores and dashes. International characters are allowed.
    /// No more than 64 user labels can be associated with one resource (System
    /// labels are excluded).
    ///
    /// See <https://goo.gl/xmQnxf> for more information and examples of labels.
    /// System reserved label keys are prefixed with
    /// `apigeeregistry.googleapis.com/` and cannot be changed.
    #[prost(map = "string, string", tag = "14")]
    pub labels: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// Annotations attach non-identifying metadata to resources.
    ///
    /// Annotation keys and values are less restricted than those of labels, but
    /// should be generally used for small values of broad interest. Larger, topic-
    /// specific metadata should be stored in Artifacts.
    #[prost(map = "string, string", tag = "15")]
    pub annotations: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// The data within all ApiVersion events.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiVersionEventData {
    /// Optional. The ApiVersion event payload. Unset for deletion events.
    #[prost(message, optional, tag = "1")]
    pub payload: ::core::option::Option<ApiVersion>,
}
/// The data within all Instance events.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstanceEventData {
    /// Optional. The Instance event payload. Unset for deletion events.
    #[prost(message, optional, tag = "1")]
    pub payload: ::core::option::Option<Instance>,
}
/// The data within all ApiSpec events.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiSpecEventData {
    /// Optional. The ApiSpec event payload. Unset for deletion events.
    #[prost(message, optional, tag = "1")]
    pub payload: ::core::option::Option<ApiSpec>,
}
/// The data within all ApiDeployment events.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiDeploymentEventData {
    /// Optional. The ApiDeployment event payload. Unset for deletion events.
    #[prost(message, optional, tag = "1")]
    pub payload: ::core::option::Option<ApiDeployment>,
}
/// The data within all Api events.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiEventData {
    /// Optional. The Api event payload. Unset for deletion events.
    #[prost(message, optional, tag = "1")]
    pub payload: ::core::option::Option<Api>,
}
/// The CloudEvent raised when an Instance is created.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstanceCreatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<InstanceEventData>,
}
/// The CloudEvent raised when an Instance is deleted.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InstanceDeletedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<InstanceEventData>,
}
/// The CloudEvent raised when an Api is created.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiCreatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ApiEventData>,
}
/// The CloudEvent raised when an Api is updated.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiUpdatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ApiEventData>,
}
/// The CloudEvent raised when an Api is deleted.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiDeletedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ApiEventData>,
}
/// The CloudEvent raised when an ApiVersion is created.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiVersionCreatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ApiVersionEventData>,
}
/// The CloudEvent raised when an ApiVersion is updated.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiVersionUpdatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ApiVersionEventData>,
}
/// The CloudEvent raised when an ApiVersion is deleted.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiVersionDeletedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ApiVersionEventData>,
}
/// The CloudEvent raised when an ApiSpec is created.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiSpecCreatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ApiSpecEventData>,
}
/// The CloudEvent raised when an ApiSpec is updated.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiSpecUpdatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ApiSpecEventData>,
}
/// The CloudEvent raised when an ApiSpec is deleted.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiSpecDeletedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ApiSpecEventData>,
}
/// The CloudEvent raised when an ApiDeployment is created.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiDeploymentCreatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ApiDeploymentEventData>,
}
/// The CloudEvent raised when an ApiDeployment is updated.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiDeploymentUpdatedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ApiDeploymentEventData>,
}
/// The CloudEvent raised when an ApiDeployment is deleted.
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(default)]
#[serde(rename_all = "snake_case")]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiDeploymentDeletedEvent {
    /// The data associated with the event.
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<ApiDeploymentEventData>,
}
